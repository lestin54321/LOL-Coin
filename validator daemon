import time
import logging
from solana.rpc.api import Client
from solana.rpc.types import TokenAccountOpts

# Set up logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger('ValidatorDaemon')

# Solana RPC URL (Mainnet or Testnet URL)
RPC_URL = "https://api.mainnet-beta.solana.com"  # Change to your cluster URL
client = Client(RPC_URL)

# Daemon configuration
POLLING_INTERVAL = 15  # In seconds, time between status checks

def get_block_height():
    """Function to retrieve the current block height from the Solana blockchain."""
    try:
        block_height = client.get_epoch_info()['result']['absoluteSlot']
        logger.info(f"Current Block Height: {block_height}")
        return block_height
    except Exception as e:
        logger.error(f"Error getting block height: {e}")
        return None

def get_validator_status():
    """Function to retrieve the status of the validator."""
    try:
        # Replace 'validator_id' with the actual public key of your validator
        validator_id = "YourValidatorPublicKey"  # Replace with actual validator public key
        status = client.get_account_info(validator_id)
        if status['result']['value']:
            logger.info(f"Validator status for {validator_id}: Active")
        else:
            logger.warning(f"Validator status for {validator_id}: Inactive or missing data")
    except Exception as e:
        logger.error(f"Error checking validator status: {e}")

def monitor_daemon():
    """Daemon loop to monitor the Solana validator and logs status periodically."""
    logger.info("Validator Daemon is starting...")
    while True:
        # Fetch and log block height
        get_block_height()
        
        # Fetch validator status (for simplicity, here it only checks if active)
        get_validator_status()
        
        # Sleep until next poll
        time.sleep(POLLING_INTERVAL)

if __name__ == "__main__":
    try:
        monitor_daemon()
    except KeyboardInterrupt:
        logger.info("Daemon interrupted by user.")
    except Exception as e:
        logger.error(f"Daemon encountered an error: {e}")
